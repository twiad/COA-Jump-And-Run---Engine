
material Bullet/Cone
{
//    receive_shadows off
	technique
	{
		pass
		{
			ambient 1 1 1 1
			diffuse 1 1 1 1
			specular 1 1 1 1 10

			texture_unit
			{
				texture cone.png
				tex_address_mode clamp
			}
		}
	}
}

material Bullet/Capsule
{
    receive_shadows off
	technique
	{
		pass
		{
			ambient 1 1 1 1
			diffuse 1 1 1 1
			specular 1 1 1 1 10

			texture_unit
			{
				texture capsule.png
				tex_address_mode clamp
			}
		}
	}
}

material Bullet/Ball
{
    receive_shadows off
	technique
	{
		pass
		{
			ambient 1 1 1 1
			diffuse 1 1 1 1
			specular 1 1 1 1 10

			texture_unit
			{
				texture ball.png
			}
		}
	}
}

material BulletPlane
{ 

  // This is the preferred technique which uses both vertex and 
   // fragment programs, supports coloured lights 
   technique 
   { 
      // do the lighting  and bump mapping with parallax pass 
      pass 
      { 
       
         // Vertex program reference 
         vertex_program_ref Examples/OffsetMappingVP 
         { 
            param_named_auto lightPosition light_position_object_space 0 
            param_named_auto eyePosition camera_position_object_space 
            param_named_auto worldViewProj worldviewproj_matrix 
         } 

         // Fragment program 
         fragment_program_ref Examples/OffsetMappingFP
         { 
            param_named_auto lightDiffuse light_diffuse_colour 0 
            param_named_auto lightSpecular light_specular_colour 0 
            // Parallax Height scale and bias 
            param_named scaleBias float4 0.04 -0.02 1 0 
         } 
          
         // Normal + height(alpha) map 
         texture_unit 
         { 
			texture tiled_floor_normalheightmap.png
            tex_coord_set 0 
         } 

         // Base diffuse texture map 
         texture_unit 
         { 
				texture tiled_floor_diffuse.png
            tex_coord_set 1 
         } 
      } 
   } 


   // This is the preferred technique which uses both vertex and 
   // fragment programs, supports coloured lights 
   technique 
   { 
      // do the lighting  and bump mapping with parallax pass 
      pass 
      { 
       
         // Vertex program reference 
         vertex_program_ref Examples/OffsetMappingVP 
         { 
            param_named_auto lightPosition light_position_object_space 0 
            param_named_auto eyePosition camera_position_object_space 
            param_named_auto worldViewProj worldviewproj_matrix 
         } 

         // Fragment program 
         fragment_program_ref Examples/OffsetMappingPS 
         { 
            param_indexed_auto 0 light_diffuse_colour 0 
            param_indexed_auto 1 light_specular_colour 0 
            // Parallax Height scale and bias 
            param_indexed 2 float4 0.04 -0.02 1 0 
         } 
          
         // Normal + height(alpha) map 
         texture_unit 
         { 
			texture tiled_floor_normalheightmap.png
            tex_coord_set 0 
         } 

         // Base diffuse texture map 
         texture_unit 
         { 
			texture tiled_floor_diffuse.png
            tex_coord_set 1 
         } 
      } 
   } 
   
   // Simple no-shader fallback
	technique
	{
		pass
		{
			ambient 1 1 1 1
			diffuse 1 1 1 1
			specular 0.75 0.75 1 1 10

			texture_unit
			{
				texture tiled_floor_diffuse.png
				filtering anisotropic
				max_anisotropy 8
			}
		}
	}

}

material Bullet/box
{

  // This is the preferred technique which uses both vertex and 
   // fragment programs, supports coloured lights 
   technique 
   { 
      // do the lighting  and bump mapping with parallax pass 
      pass 
      { 
       
         // Vertex program reference 
         vertex_program_ref Examples/OffsetMappingVP 
         { 
            param_named_auto lightPosition light_position_object_space 0 
            param_named_auto eyePosition camera_position_object_space 
            param_named_auto worldViewProj worldviewproj_matrix 
         } 

         // Fragment program 
         fragment_program_ref Examples/OffsetMappingFP
         { 
            param_named_auto lightDiffuse light_diffuse_colour 0 
            param_named_auto lightSpecular light_specular_colour 0 
            // Parallax Height scale and bias 
            param_named scaleBias float4 0.04 -0.02 1 0 
         } 
          
         // Normal + height(alpha) map 
         texture_unit 
         { 
			texture crate_normalheightmap.png
            tex_coord_set 0 
         } 

         // Base diffuse texture map 
         texture_unit 
         { 
			texture crate_diffuse.png
            tex_coord_set 1 
         } 
      } 
   } 


   // This is the preferred technique which uses both vertex and 
   // fragment programs, supports coloured lights 
   technique 
   { 
      // do the lighting  and bump mapping with parallax pass 
      pass 
      { 
       
         // Vertex program reference 
         vertex_program_ref Examples/OffsetMappingVP 
         { 
            param_named_auto lightPosition light_position_object_space 0 
            param_named_auto eyePosition camera_position_object_space 
            param_named_auto worldViewProj worldviewproj_matrix 
         } 

         // Fragment program 
         fragment_program_ref Examples/OffsetMappingPS 
         { 
            param_indexed_auto 0 light_diffuse_colour 0 
            param_indexed_auto 1 light_specular_colour 0 
            // Parallax Height scale and bias 
            param_indexed 2 float4 0.04 -0.02 1 0 
         } 
          
         // Normal + height(alpha) map 
         texture_unit 
         { 
			texture crate_normalheightmap.png
            tex_coord_set 0 
         } 

         // Base diffuse texture map 
         texture_unit 
         { 
			texture tiled_floor_diffuse.png
            tex_coord_set 1 
         } 
      } 
   } 
   
   // Simple no-shader fallback
	technique
	{
		pass
		{
			ambient 1 1 1 1
			diffuse 1 1 1 1
			specular 0.75 0.75 1 1 10

			texture_unit
			{
				texture crate_diffuse.png
				filtering anisotropic
				max_anisotropy 8
			}
		}
	}
}
